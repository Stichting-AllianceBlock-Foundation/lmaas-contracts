/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ThrottledExitInterface extends utils.Interface {
  functions: {
    "campaignEndTimestamp()": FunctionFragment;
    "exitInfo(address)": FunctionFragment;
    "getPendingReward(uint256)": FunctionFragment;
    "nextAvailableExitTimestamp()": FunctionFragment;
    "nextAvailableRoundExitVolume()": FunctionFragment;
    "throttleRoundCap()": FunctionFragment;
    "throttleRoundSeconds()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "campaignEndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exitInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextAvailableExitTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextAvailableRoundExitVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "throttleRoundCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "throttleRoundSeconds",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "campaignEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exitInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAvailableExitTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextAvailableRoundExitVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "throttleRoundCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "throttleRoundSeconds",
    data: BytesLike
  ): Result;

  events: {
    "ExitCompleted(address,uint256)": EventFragment;
    "ExitRequested(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ExitCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExitRequested"): EventFragment;
}

export type ExitCompletedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; stake: BigNumber }
>;

export type ExitCompletedEventFilter = TypedEventFilter<ExitCompletedEvent>;

export type ExitRequestedEvent = TypedEvent<
  [string, BigNumber],
  { user: string; exitTimestamp: BigNumber }
>;

export type ExitRequestedEventFilter = TypedEventFilter<ExitRequestedEvent>;

export interface ThrottledExit extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ThrottledExitInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    campaignEndTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    exitInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exitTimestamp: BigNumber;
        exitStake: BigNumber;
      }
    >;

    getPendingReward(
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nextAvailableExitTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextAvailableRoundExitVolume(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    throttleRoundCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    throttleRoundSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  campaignEndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  exitInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { exitTimestamp: BigNumber; exitStake: BigNumber }
  >;

  getPendingReward(
    _tokenIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nextAvailableExitTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  nextAvailableRoundExitVolume(overrides?: CallOverrides): Promise<BigNumber>;

  throttleRoundCap(overrides?: CallOverrides): Promise<BigNumber>;

  throttleRoundSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    campaignEndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    exitInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exitTimestamp: BigNumber;
        exitStake: BigNumber;
      }
    >;

    getPendingReward(
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextAvailableExitTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableRoundExitVolume(overrides?: CallOverrides): Promise<BigNumber>;

    throttleRoundCap(overrides?: CallOverrides): Promise<BigNumber>;

    throttleRoundSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ExitCompleted(address,uint256)"(
      user?: null,
      stake?: null
    ): ExitCompletedEventFilter;
    ExitCompleted(user?: null, stake?: null): ExitCompletedEventFilter;

    "ExitRequested(address,uint256)"(
      user?: null,
      exitTimestamp?: null
    ): ExitRequestedEventFilter;
    ExitRequested(user?: null, exitTimestamp?: null): ExitRequestedEventFilter;
  };

  estimateGas: {
    campaignEndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    exitInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPendingReward(
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nextAvailableExitTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableRoundExitVolume(overrides?: CallOverrides): Promise<BigNumber>;

    throttleRoundCap(overrides?: CallOverrides): Promise<BigNumber>;

    throttleRoundSeconds(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    campaignEndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingReward(
      _tokenIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextAvailableExitTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextAvailableRoundExitVolume(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    throttleRoundCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    throttleRoundSeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
