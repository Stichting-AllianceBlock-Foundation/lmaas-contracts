/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "AccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerable__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IAccessControlEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Pausable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC20PresetMinterPauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PresetMinterPauser__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "AutoStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutoStake__factory>;
    getContractFactory(
      name: "LimitedAutoStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LimitedAutoStake__factory>;
    getContractFactory(
      name: "StakeReceiverAutoStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeReceiverAutoStake__factory>;
    getContractFactory(
      name: "StakeTransfererAutoStake",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeTransfererAutoStake__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "IRewardsPoolBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsPoolBase__factory>;
    getContractFactory(
      name: "LiquidityMiningCampaign",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidityMiningCampaign__factory>;
    getContractFactory(
      name: "AutoStakeReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutoStakeReceiverMock__factory>;
    getContractFactory(
      name: "AutoStakeTransfererMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AutoStakeTransfererMock__factory>;
    getContractFactory(
      name: "OnlyExitRewardsPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyExitRewardsPoolMock__factory>;
    getContractFactory(
      name: "StakeLockingRewardsPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeLockingRewardsPoolMock__factory>;
    getContractFactory(
      name: "StakeReceiverRewardsPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeReceiverRewardsPoolMock__factory>;
    getContractFactory(
      name: "StakeTransfererRewardsPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeTransfererRewardsPoolMock__factory>;
    getContractFactory(
      name: "ThrottledExitRewardsPoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThrottledExitRewardsPoolMock__factory>;
    getContractFactory(
      name: "OneStakerFeature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OneStakerFeature__factory>;
    getContractFactory(
      name: "OnlyExitFeature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnlyExitFeature__factory>;
    getContractFactory(
      name: "StakeLockingFeature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeLockingFeature__factory>;
    getContractFactory(
      name: "StakeReceiverFeature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeReceiverFeature__factory>;
    getContractFactory(
      name: "StakeTransfererFeature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeTransfererFeature__factory>;
    getContractFactory(
      name: "ThrottledExitFeature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThrottledExitFeature__factory>;
    getContractFactory(
      name: "RewardsPoolBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsPoolBase__factory>;
    getContractFactory(
      name: "StakeLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeLock__factory>;
    getContractFactory(
      name: "StakeReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeReceiver__factory>;
    getContractFactory(
      name: "StakeTransferer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakeTransferer__factory>;
    getContractFactory(
      name: "TestERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestERC20__factory>;
    getContractFactory(
      name: "ThrottledExit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ThrottledExit__factory>;
    getContractFactory(
      name: "CompoundingRewardsPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundingRewardsPool__factory>;
    getContractFactory(
      name: "CompoundingRewardsPoolStaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundingRewardsPoolStaker__factory>;
    getContractFactory(
      name: "NonCompoundingRewardsPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonCompoundingRewardsPool__factory>;

    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "AccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerable>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IAccessControlEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Pausable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC20PresetMinterPauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PresetMinterPauser>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "AutoStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutoStake>;
    getContractAt(
      name: "LimitedAutoStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LimitedAutoStake>;
    getContractAt(
      name: "StakeReceiverAutoStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeReceiverAutoStake>;
    getContractAt(
      name: "StakeTransfererAutoStake",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeTransfererAutoStake>;
    getContractAt(
      name: "IERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Detailed>;
    getContractAt(
      name: "IRewardsPoolBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsPoolBase>;
    getContractAt(
      name: "LiquidityMiningCampaign",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidityMiningCampaign>;
    getContractAt(
      name: "AutoStakeReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutoStakeReceiverMock>;
    getContractAt(
      name: "AutoStakeTransfererMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AutoStakeTransfererMock>;
    getContractAt(
      name: "OnlyExitRewardsPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyExitRewardsPoolMock>;
    getContractAt(
      name: "StakeLockingRewardsPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeLockingRewardsPoolMock>;
    getContractAt(
      name: "StakeReceiverRewardsPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeReceiverRewardsPoolMock>;
    getContractAt(
      name: "StakeTransfererRewardsPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeTransfererRewardsPoolMock>;
    getContractAt(
      name: "ThrottledExitRewardsPoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThrottledExitRewardsPoolMock>;
    getContractAt(
      name: "OneStakerFeature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OneStakerFeature>;
    getContractAt(
      name: "OnlyExitFeature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnlyExitFeature>;
    getContractAt(
      name: "StakeLockingFeature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeLockingFeature>;
    getContractAt(
      name: "StakeReceiverFeature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeReceiverFeature>;
    getContractAt(
      name: "StakeTransfererFeature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeTransfererFeature>;
    getContractAt(
      name: "ThrottledExitFeature",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThrottledExitFeature>;
    getContractAt(
      name: "RewardsPoolBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsPoolBase>;
    getContractAt(
      name: "StakeLock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeLock>;
    getContractAt(
      name: "StakeReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeReceiver>;
    getContractAt(
      name: "StakeTransferer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakeTransferer>;
    getContractAt(
      name: "TestERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestERC20>;
    getContractAt(
      name: "ThrottledExit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ThrottledExit>;
    getContractAt(
      name: "CompoundingRewardsPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundingRewardsPool>;
    getContractAt(
      name: "CompoundingRewardsPoolStaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundingRewardsPoolStaker>;
    getContractAt(
      name: "NonCompoundingRewardsPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonCompoundingRewardsPool>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
