/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PercentageCalculator,
  PercentageCalculatorInterface,
} from "../PercentageCalculator";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_percentage",
        type: "uint256",
      },
    ],
    name: "percentageCalc",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610266610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c806354b4c2811461003a575b600080fd5b610054600480360381019061004f91906100c0565b61006a565b604051610061919061010b565b60405180910390f35b6000620186a0610083838561009590919063ffffffff16565b61008d9190610126565b905092915050565b600081836100a39190610157565b905092915050565b6000813590506100ba81610219565b92915050565b600080604083850312156100d357600080fd5b60006100e1858286016100ab565b92505060206100f2858286016100ab565b9150509250929050565b610105816101b1565b82525050565b600060208201905061012060008301846100fc565b92915050565b6000610131826101b1565b915061013c836101b1565b92508261014c5761014b6101ea565b5b828204905092915050565b6000610162826101b1565b915061016d836101b1565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156101a6576101a56101bb565b5b828202905092915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b610222816101b1565b811461022d57600080fd5b5056fea264697066735822122028a918c6cde5fffd9979a42483199851bfdd98832a12c6f2460b7324f0ef7ebc64736f6c63430008040033";

type PercentageCalculatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PercentageCalculatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PercentageCalculator__factory extends ContractFactory {
  constructor(...args: PercentageCalculatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PercentageCalculator> {
    return super.deploy(overrides || {}) as Promise<PercentageCalculator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PercentageCalculator {
    return super.attach(address) as PercentageCalculator;
  }
  connect(signer: Signer): PercentageCalculator__factory {
    return super.connect(signer) as PercentageCalculator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PercentageCalculatorInterface {
    return new utils.Interface(_abi) as PercentageCalculatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PercentageCalculator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as PercentageCalculator;
  }
}
