/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IRewardsPoolBaseInterface extends utils.Interface {
  functions: {
    "balanceOf(address)": FunctionFragment;
    "calculateRewardsAmount(uint256,uint256,uint256)": FunctionFragment;
    "claim()": FunctionFragment;
    "endTimestamp()": FunctionFragment;
    "exit()": FunctionFragment;
    "extend(uint256,uint256[])": FunctionFragment;
    "getUserAccumulatedReward(address,uint256,uint256)": FunctionFragment;
    "getUserOwedTokens(address,uint256)": FunctionFragment;
    "getUserRewardDebt(address,uint256)": FunctionFragment;
    "getUserRewardDebtLength(address)": FunctionFragment;
    "getUserTokensOwedLength(address)": FunctionFragment;
    "name()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakingToken()": FunctionFragment;
    "start(uint256,uint256,uint256[])": FunctionFragment;
    "updateRewardMultipliers()": FunctionFragment;
    "updateUserAccruedReward(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawTokens(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsAmount",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "endTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "exit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extend",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccumulatedReward",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOwedTokens",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardDebt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardDebtLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokensOwedLength",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardMultipliers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserAccruedReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "extend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccumulatedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOwedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardDebtLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokensOwedLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardMultipliers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserAccruedReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IRewardsPoolBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRewardsPoolBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    balanceOf(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateRewardsAmount(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extend(
      _endTimestamp: BigNumberish,
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserAccumulatedReward(
      _userAddress: string,
      tokenIndex: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserOwedTokens(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getUserRewardDebt(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    getUserRewardDebtLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserTokensOwedLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    stake(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<[string]>;

    start(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardMultipliers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateUserAccruedReward(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateRewardsAmount(
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _rewardPerSecond: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  exit(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extend(
    _endTimestamp: BigNumberish,
    _rewardsPerSecond: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserAccumulatedReward(
    _userAddress: string,
    tokenIndex: BigNumberish,
    time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserOwedTokens(
    _userAddress: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getUserRewardDebt(
    _userAddress: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  getUserRewardDebtLength(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserTokensOwedLength(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  stake(
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingToken(overrides?: CallOverrides): Promise<string>;

  start(
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _rewardPerSecond: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardMultipliers(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateUserAccruedReward(
    _userAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    recipient: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsAmount(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    exit(overrides?: CallOverrides): Promise<void>;

    extend(
      _endTimestamp: BigNumberish,
      _rewardsPerSecond: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    getUserAccumulatedReward(
      _userAddress: string,
      tokenIndex: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOwedTokens(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserRewardDebt(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getUserRewardDebtLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokensOwedLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    stake(_tokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakingToken(overrides?: CallOverrides): Promise<string>;

    start(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardMultipliers(overrides?: CallOverrides): Promise<void>;

    updateUserAccruedReward(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawTokens(
      recipient: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateRewardsAmount(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extend(
      _endTimestamp: BigNumberish,
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserAccumulatedReward(
      _userAddress: string,
      tokenIndex: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOwedTokens(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardDebt(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRewardDebtLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserTokensOwedLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    stake(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardMultipliers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateUserAccruedReward(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateRewardsAmount(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exit(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extend(
      _endTimestamp: BigNumberish,
      _rewardsPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserAccumulatedReward(
      _userAddress: string,
      tokenIndex: BigNumberish,
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOwedTokens(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewardDebt(
      _userAddress: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRewardDebtLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserTokensOwedLength(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stake(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _rewardPerSecond: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardMultipliers(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateUserAccruedReward(
      _userAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      recipient: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
